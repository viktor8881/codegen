package http

const tmplCodeGeneratorPhrase = `// Code generated by codegen; DO NOT EDIT.
// This file was generated automatically and any changes will be overwritten.
`

const tmplServerEndpointFile = tmplCodeGeneratorPhrase + `

package server

import (
	"context"
	customHttp "github.com/viktor8881/service-utilities/http/server"
	"go.uber.org/zap"	
)


{{- range .Endpoints }}

{{ . }}
{{- end }}

`

const tmplServerEndpoint = `
func {{.Name}}(
	t *customHttp.Transport,
	handlerFn func(ctx context.Context, in *{{.InputRequest}}) (*{{.OutputResponse}}, error),
	logger *zap.Logger,	
	middlewares ...customHttp.Middleware,
) {
	t.AddEndpoint(
		"{{.Url}}",
		"{{.Method}}",
		(*{{.InputRequest}})(nil),
		func(ctx context.Context, in interface{}) (interface{}, error) {
			return handlerFn(ctx, in.(*{{.InputRequest}}))
		},
		logger,	
		middlewares...,
	)
}
`

const tmplClientEndpointFile = tmplCodeGeneratorPhrase + `

package client

import (
	"context"
	"encoding/json"
	simpleClient "github.com/viktor8881/service-utilities/http/client"	
)

type Client struct {
	client *simpleClient.SimpleClient
}

func NewClient(client *simpleClient.SimpleClient) *Client {
	return &Client{client: client}
}

{{- range .Endpoints }}

{{ . }}
{{- end }}
`

const tmplClientEndpoint = `
func (c *Client){{.Name}}(
	ctx context.Context, client *simpleClient.SimpleClient, in any) (*{{.OutputResponse}}, error) {
	var dest {{.OutputResponse}}

	resp, err := c.client.{{toCamelCase .Method}}(ctx, "{{.Url}}", in, nil)
	if err != nil {
		return nil, err
	}

	if resp.Body != nil {
		defer resp.Body.Close()
	}

	if err := json.NewDecoder(resp.Body).Decode(&dest); err != nil {
		return nil, err
	}

	return &dest, nil
}
`

const tmplLogicServiceFile = `package {{.ServiceNameToLower}}

import (
	"context"
	"errors"
	generated "{{.PackageName}}/generated/http/server"
)

type {{.ServiceName}}Service struct {}

func NewService() *{{.ServiceName}}Service {
	return &{{.ServiceName}}Service{}
}
`

const tmplLogicServiceEndpoint = `
func (s *{{.ServiceName}}Service) {{.ServiceMethod}}(ctx context.Context, in *generated.{{.InputRequest}}) (*generated.{{.OutputResponse}}, error) {
	var dest generated.{{.OutputResponse}}
	return &dest, errors.New("not implemented")
}
`

const tmplAddCodeToRouterFile = `
generated.{{.Name}}(
		tr,
		{{.ServiceNameToLower}}.NewService().{{.ServiceMethod}},
		logger,	
	)
`
