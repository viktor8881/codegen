package http

const tmplCodeGeneratorPhrase = `// Code generated by codegen; DO NOT EDIT.
// This file was generated automatically and any changes will be overwritten.
`

const tmplServerEndpointFile = tmplCodeGeneratorPhrase + `

package server

import (
	"context"
	customHttp "github.com/viktor8881/service-utilities/http/server"
	"go.uber.org/zap"
	"net/http"
)


{{- range .Endpoints }}

{{ . }}
{{- end }}

`

const tmplServerEndpoint = `
func {{.Name}}(
	t *customHttp.Transport,
	handlerFn func(ctx context.Context, in *{{.InputRequest}}) (*{{.OutputResponse}}, error),
	logger *zap.Logger,
	fErrorHandler func(w http.ResponseWriter, r *http.Request, err error, logger *zap.Logger),
) {
	t.AddEndpoint(
		"{{.Url}}",
		"{{.Method}}",
		(*{{.InputRequest}})(nil),
		func(ctx context.Context, in interface{}) (interface{}, error) {
			return handlerFn(ctx, in.(*{{.InputRequest}}))
		},
		logger,
		fErrorHandler,
	)
}
`

const tmplClientEndpointFile = tmplCodeGeneratorPhrase + `

package client

import (
	"context"
	"encoding/json"
	simpleClient "github.com/viktor8881/service-utilities/http/client"	
)

{{- range .Endpoints }}

{{ . }}
{{- end }}
`

const tmplClientEndpoint = `
func {{.Name}}(
	ctx context.Context, client *simpleClient.SimpleClient, in any) (*{{.OutputResponse}}, error) {
	var dest {{.OutputResponse}}

	url, err := simpleClient.BuildURL("{{.Url}}", in)
	if err != nil {
		return nil, err
	}

	resp, err := client.Get(ctx, url, nil)
	if err != nil {
		return nil, err
	}

	if resp.Body != nil {
		defer resp.Body.Close()
	}

	if err := json.NewDecoder(resp.Body).Decode(&dest); err != nil {
		return nil, err
	}

	return &dest, nil
}
`

const tmplLogicServiceFile = `package {{.ServiceNameToLower}}

import (
	"context"
	"errors"
	simplehttp "github.com/viktor8881/service-utilities/http/client"
	generated "{{.PackageName}}/generated/http/server"
)

type {{.ServiceName}}Service struct {}
`

const tmplLogicServiceEndpoint = `
func {{.ServiceMethod}}(ctx context.Context, in *generated.{{.InputRequest}}) (*generated.{{.OutputResponse}}, error) {
	return &generated.{{.OutputResponse}}{}, errors.New("not implemented")
}
`

const tmplErrorFile = `package {{.ServiceNameToLower}}

import (
	"errors"
	customHttp "github.com/viktor8881/service-utilities/http/server"
	"go.uber.org/zap"
	"net/http"
	"{{.PackageName}}/utils"
)


func ErrorHandler(w http.ResponseWriter,
	r *http.Request,
	err error,
	logger *zap.Logger,
) {
	var decodeEncodeError *customHttp.DecodeEncodeError
	var methodNotAllowedError *customHttp.MethodNotAllowedError	

	var code int
	var message string

	switch {
	case errors.As(err, &methodNotAllowedError):
		code = http.StatusMethodNotAllowed
		message = "method not allowed"
	case errors.As(err, &decodeEncodeError):
		code = decodeEncodeError.Code2user
		message = decodeEncodeError.Mess2user
	default:
		code = http.StatusInternalServerError
		message = "internal server error"
	}

	utils.ErrorHandlerHelper(w, r, err, logger, code, message)
}

`

const tmplUtilsErrorHelperFile = `package utils

import (
	"encoding/json"
	"go.uber.org/zap"
	"io"
	"net/http"
)

func ErrorHandlerHelper(w http.ResponseWriter,
	r *http.Request,
	err error,
	logger *zap.Logger,
	code int,
	message string,
) {

	var bodyStr string
	if r.Body != nil {
		body, _ := io.ReadAll(r.Body)
		defer r.Body.Close()

		bodyStr = string(body)
	} else {
		bodyStr = r.URL.Query().Encode()
	}

	logger.Error(message,
		zap.String("url", r.Method+": "+r.URL.String()),
		zap.String("body", bodyStr),
		zap.String("url", r.URL.String()),
		zap.Error(err))

	w.WriteHeader(code)

	if code >= 400 && code < 500 {
		errorResponse := struct {
			Message string	{{.TagJsonErrorMess}}
		}{
			Message: message,
		}
		w.Header().Set("Content-Type", "application/json")
		_ = json.NewEncoder(w).Encode(&errorResponse)
	}
}
`

const tmplAddCodeToRouterFile = `
generated.{{.Name}}(
		tr,
		{{.ServiceNameToLower}}.NewService().{{.ServiceMethod}},
		logger,
		{{.ServiceNameToLower}}.ErrorHandler,
	)
`
